<?php
namespace CowsAPIModels;


require_once 'C:\Users\its-zach\git\Cows-RESTful-API-MVC\Cows-RESTful-API-MVC\CowsAPI\Models\ServiceFactory.php';

/**
 * Test class for ServiceFactory.
 * Generated by PHPUnit on 2013-09-06 at 10:47:38.
 */
class ServiceFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ServiceFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->object = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(new CurlWrapper(), new DBWrapper()),array());
    }
    /**
     * @dataProvider serviceTicketProvider
     */
    public function testServiceTicket($a,$b)	{

    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array("tgc" => 1));
		$this->assertSame("ticket",$serviceFactory->getServiceTicket());
    	
    	$this->setExpectedException("UnexpectedValueException");
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($b));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array("tgc" => 1));
    	$serviceFactory->getServiceTicket();
    }
    
    //TODO CAS output
    public function serviceTicketProvider()	{
    	return array(
    		"<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>
	<cas:proxyFailure code='INVALID_TICKET'>
		ticket x not recognized
	</cas:proxyFailure>
</cas:serviceResponse>",
    		""
    	);
    }
    
    public function testServiceTicketNoTGC()	{
    	//Invalid param case
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue(false));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array());
    	$this->setExpectedException('InvalidArgumentException');
    	$serviceFactory->getServiceTicket();
    }
    
    public function testSiteId()	{
    	$this->assertTrue($object->validateSiteId("its"));
    	$this->assertTrue($object->validateSiteId("cbs"));
    	$this->assertTrue($object->validateSiteId("engr"));
    	$this->assertTrue($object->validateSiteId("law"));
    	$this->assertTrue($object->validateSiteId("rmi"));
    	$this->assertTrue($object->validateSiteId("taag"));
    	$this->assertFalse($object->validateSiteId("fake"));
    }
    
    /**
     * @dataProvider eventIdProvider
     */
    public function testGetEventById($a)	{
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array("tgc" => 1));
    	//TODO expected array
    	$this->assertSame($serviceFactory->getEventById(1));
    }
    //TODO event data
    public function eventIdProvider()	{
    	return array (
    		""
    	);
    }
    
    /**
     * 
     *  @dataProvider checkSessionProvider()
     */
    public function testCheckSession($a)	{
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a[0]));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array("tgc" => 1));
		$this->assertTrue($serviceFactory->checkSession());
    	
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a[1]));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array("tgc" => 1));
    	$this->assertFalse($serviceFactory->getServiceTicket());
    }
    
    //TODO cows index logged in and out
    public function checkSessionProvider()	{
    	return array(
    		"",
    		""
    	);
    }
    
    /**
     * @dataProvider eventParams
     */
    public function testBuildEventParams($a)	{
    	$this->object->setParms($a[0]);
    	$this->assertSame("Categories=Other", $this->object->buildEventParams());
    	$this->object->setParms($a[1]);
    	$this->assertSame("Categories=Other&Categories=m", $this->object->buildEventParams());
    	$this->object->setParms($a[2]);
    	$this->setExpectedException('InvalidArgumentException');
    	$this->assertSame($this->object->buildEventParams());
    }
    
    public function eventParams()	{
    	return array (
	    		array(
					'Categories' => 'Other',
	    			'Categories' => 'Other&m',
	    			null
				)
    	);
    }
    //TODO data provider
    /**
     * @dataProvider createEventParams
     */
    public function testCreateEvent($a)	{
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a[0]));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array());
    	$this->assertTrue($serviceFactory->createEvent());
    	 
    	$this->setExpectedException("RuntimeException");
    	$curl = $this->getMock('CurlWrapper');
    	$curl->expects($this->any())
    	->method($execute)
    	->will($this->returnValue($a[1]));
    	$serviceFactory = new ServiceFactory(new DomainObjectFactory(), new DataMapperFactory(null,$curl),array());
    	$serviceFactory->createEvent();
    }
    
    public function createEventParams()	{
    	return array();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
?>
